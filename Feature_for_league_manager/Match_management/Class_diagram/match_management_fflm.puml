@startuml classDiagram

skinparam classFontSize 20

class Squad{
    +SquadId int
    +MatchId int
    +IsHome bool
    +NoPlayerSquad int
}

class MatchStat{
    +MatchStatId int
    +MatchId int
    +IsHome bool
    +Score int
    +Shot int
    +ShotOnTarget int
    +Conner int
    +Foul int
    +Offside int
    +YellowCard int
    +RedCard int
}

class ParticipateNode{
    +ParticipateNodeId int
    +ParticipateId int
    +ClubCloneId int
    +Deep int
    +ParentId int
    +LeftId int
    +RightId int
    +LeagueId int
}

class Match{
    +MatchId int
    +LeagueId int
    +HomeId int
    +AwayId int
    +MatchDate DateTime
    +IsFinish bool
    +Round string
    +Stadium string
}

class MatchStatisticController{
    +MatchStatisticController(matchStatisticService: 
    MatchStatisticService)
    +GetMatchStat(matchId: 
    int): ActionResult<MatchStatisticResponse>
    +UpdateMatchStat(request: 
    UpdateMatchStatRequest): ActionResult<MatchStatisticResponse>
}
MatchStatisticController x--> MatchStatisticService: matchStatisticService

interface MatchStatisticService

class MatchStatisticServiceImpl implements MatchStatisticService{
    +MatchStatisticServiceImpl(matchStatisticRepository: 
    MatchStatisticRepository, matchRepository: MatchRepository)
    +GetMatchStatistic(matchId: int): MatchStatisticResponse
    +UpdateMatchStatistic(request: UpdateMatchStatRequest, 
    UserId: int): UpdateMatchStatResponse
}
MatchStatisticServiceImpl x--> MatchRepository: matchRepository
MatchStatisticServiceImpl x--> MatchStatisticRepository: matchStatisticRepository

interface MatchStatisticRepository<MatchStat> implements BaseRepository
MatchStatisticRepository --o MatchStat

class MatchStatisticRepositoryImpl implements MatchStatisticRepository

class MatchController{
    +MatchController(matchService: MatchService)
    +GetMatchInfo(matchId: int): ActionResult<MatchInfoResponse>
    +GetLeagueSchedule(request: 
    LeagueScheduleRequest): ActionResult<LeagueScheduleResponse>
    +GetClubSchedule(clubId: int): ActionResult<ClubScheduleResponse>
    +FinishMatch(id: int): ActionResult<FinishMatchResponse>
    +UpdateMatch(request: 
    UpdateMatchInfoRequest): ActionResult<UpdateMatchInfoResponse>
}

MatchController x--> MatchService: matchService

interface MatchService

class MatchServiceImpl implements MatchService{
    +MatchServiceImpl(matchRepository: MatchRepository, matchEventRepository: 
    MatchEventRepository, participateNodeRepository: ParticipateNodeRepository)
    +GetLeagueSchedule(request: 
    LeagueScheduleRequest ): LeagueScheduleResponse
    +GetClubSchedule(ClubId: int): ClubScheduleResponse
    +GetMatchInfo(matchId: int): MatchInfoResponse
    +FinishMatch(matchId: int, userId: int): FinishMatchResponse
    +UpdateMatchInfo(request: UpdateMatchInfoRequest,UserId: 
    int): UpdateMatchInfoResponse
}
MatchServiceImpl x--> MatchRepository: matchRepository
MatchServiceImpl x--> MatchEventRepository: matchEventRepository
MatchServiceImpl x--> ParticipateNodeRepository: participateNodeRepository

interface MatchRepository<Match> implements BaseRepository
MatchRepository --o Match

class MatchRepositoryImpl implements MatchRepository

interface ParticipateNodeRepository<ParticipateNode> implements BaseRepository
ParticipateNodeRepository --o ParticipateNode

class ParticipateNodeRepositoryImpl implements ParticipateNodeRepository

interface BaseRepository<T>

class BaseRepositoryImpl<T> {
  +BaseRepositoryImpl(dbContext: FLMS_DBContext)
  +FindAll(): IQueryable<T>
  +FindByCondition(expression: Expression<Func<T, bool>>):IQueryable<T>
  +CreateAsync(entity: T): bool
  +UpdateAsync(entity: T): T
  +DeleteAsync(entity: T): T
}
BaseRepositoryImpl ..|> BaseRepository 

class SquadController{
    +SquadController(squadService: SquadService)
    +GetMatchSquad(matchId: int): ActionResult<MatchSquadResponse>
    +GetSquad(squadId: int): ActionResult<MatchSquadResponse>
    +GetSquadInMatch(request: 
    SquadInMatchRequest): ActionResult<MatchSquadResponse>
    +GetUnsquadPlayers(squadId: int): ActionResult<List<PlayerSquadPositionDTO>>
    +AddPlayerToPosition(request: 
    AddPositionRequest): ActionResult<AddPositionResponse>
    +RemovePlayerFromPosition(positionId: 
    int): ActionResult<RemovePositionResponse>
    +GetPlayerJoinedMatch(matchId: int): ActionResult<List<PlayerSquadPositionDTO>
    +UpdateSquadPosition(request: 
    UpdateSquadPositionRequest): ActionResult<UpdateSquadResponse>
    +GetSquadByManager(squadId: int): ActionResult<ManagerSquadResponse>
    +GetListPlayerJoinMatch(request: 
    ListPlayerJoinMatchRequest): ActionResult<List<PlayerSquadPositionDTO>>
}
SquadController x--> SquadService: squadService

interface SquadService

class SquadServiceImpl implements SquadService{
    +SquadServiceImpl(squadRepository: SquadRepository, squadPositionRepository: 
    SquadPositionRepository, playerRepository: PlayerRepository)
    +GetMatchSquad(matchId: int): MatchSquadResponse
    +GetSquadById(squadId: int): SquadResponse
    +GetSquadInMatch(request: SquadInMatchRequest): SquadResponse
    +GetUnsquadPlayer(squadId: int): List<PlayerSquadPositionDTO>
    +GetMatchPlayers(matchId: int): List<PlayerSquadPositionDTO>
    +GetPlayerForEvent(request: PlayerForEventRequest): List<PlayerSquadPositionDTO>
    +AddSquadPosition(request: AddPositionRequest, userId: int): AddPositionResponse
    +RemoveSquadPosition(squadPositionId: int, userId: int): RemovePositionResponse
    +UpdateSquadPosition(request: UpdateSquadPositionRequest, userId: int): 
    UpdateSquadResponse
    +GetSquadByManager(squadId: int, userId: int): ManagerSquadResponse
    +GetListPlayerJoinMatch(request: ListPlayerJoinMatchRequest): List<PlayerSquadPositionDTO>
} 

SquadServiceImpl x--> SquadRepository: squadRepository

interface SquadRepository<Squad> implements BaseRepository
SquadRepository --o Squad

class SquadRepositoryImpl implements SquadRepository
@enduml