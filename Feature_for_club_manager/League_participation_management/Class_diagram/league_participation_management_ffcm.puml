@startuml Feature for club manager - league participation management 

skinparam classFontSize 15

class Club{
    +ClubId int
    +UserId int
    +ClubName string
    +Email string
    +PhoneNumber string
    +CreateAt DateTime
    +Logo string
    +FanPage string
}

class League{
    +LeagueId int
    +UserId int
    +LeagueName string
    +NoParticipate int
    +StartDate DateTime
    +EndDate DateTime
    +MaxNoPlayer int
    +NoPlayerSquad int
    +Location string
    +Fanpage string
    +CreateAt DateTime
    +Description string
    +LeagueType string
    +NoRound int
    +Logo string
    +IsFinished bool
}

class Squad{
    +SquadId int
    +MatchId int
    +IsHome bool
    +NoPlayerSquad int
}

class ClubController{
    +ClubController(clubService: ClubService)
    +CreateClub(createClubRequest: CreateClubRequest): ActionResult<CreateResponse>
    +GetClub(id: int): ActionResult<ClubResponse>
    +GetListClubFilter(request: ListClubFilterRequest): ActionResult<ListClubResponse>
    +DeleteClub(id: int): ActionResult<DeleteClubResponse>
    +GetListClubByUser(): ActionResult<List<ClubByUserDTO>>
    +GetClubLeagueHistory(id: int): ActionResult<List<ClubHistoryDTO>>
    +GetIncomingMatches(): ActionResult<List<IncomingMatchDTO>>
    +GetClubHistory(id: int): ActionResult<List<ClubHistoryDTO>>
    +GetClubUpdateInfo(id: int): ActionResult<ClubUpdateInfoResponse>
    +UpdateClubInfo(request: UpdateClubInfoRequest): ActionResult<ClubUpdateInfoResponse>
}
ClubController x--> ClubService: clubService

interface ClubService

class ClubServiceImpl implements ClubService{
    +ClubServiceImpl(clubRepository: ClubRepository, squadRepository: SquadRepository, 
    matchRepository: MatchRepository, participateNodeRepository: ParticipateNodeRepository)
    +GetClubById(id: int): ClubResponse
    +CreateClub(request: CreateClubRequest, UserId: int): CreateResponse
    +GetListClubFilter(request: ListClubFilterRequest): ListClubResponse
    +GetListClubByUser(userId: int): List<ClubByUserDTO>
    +DeleteClub(id: int, userId: int): DeleteClubResponse
    +GetClubLeagueHistory(clubId: int): List<ClubHistoryDTO>
    +GetIncomingMatch(userId: int): List<IncomingMatchDTO>
    +GetClubHistory(clubId: int): ClubHistoryResponse
    +GetClubUpdateInfo(clubId: int): ClubUpdateInfoResponse
    +UpdateClubInfo(request: UpdateClubInfoRequest, UserId: int): ClubUpdateInfoResponse
}
ClubServiceImpl x--> ClubRepository: clubRepository
ClubServiceImpl x--> SquadRepository: squadRepository

interface BaseRepository<T>

class BaseRepositoryImpl<T> {
  +BaseRepositoryImpl(dbContext: FLMS_DBContext)
  +FindAll(): IQueryable<T>
  +FindByCondition(expression: Expression<Func<T, bool>>):IQueryable<T>
  +CreateAsync(entity: T): bool
  +UpdateAsync(entity: T): T
  +DeleteAsync(entity: T): T
}
BaseRepositoryImpl ..|> BaseRepository 

interface ClubRepository<Club> implements BaseRepository
ClubRepository --o Club

class ClubRepositoryImpl implements ClubRepository

interface SquadRepository<Squad> implements BaseRepository
SquadRepository --o Squad

class LeagueRepositoryImpl implements LeagueRepository

class LeagueController{
    +LeagueController(leagueService: LeagueService)
    +CreateLeague(request: CreateLeagueRequest): ActionResult<CreateLeagueResponse>
    +GetListLeagueFilters(request: ListLeagueFilterRequest): ActionResult<ListLeagueResponse>
    +GetListLeagueInfo(id: int): ActionResult<LeagueInfoResponse>
    +GetListLeagueByUser(): ActionResult<List<LeagueByUserDTO>>
    +GetLeagueStatistic(id: int): ActionResult<LeagueLeagueStatisticResponse>
    +GetKnockOutStatistic(id: int): ActionResult<LeagueKnockOutStatisticResponse>
    +DeleteLeague(id: int): ActionResult<DeleteLeagueResponse>
    +GetTopLeaguePrize(id: int): ActionResult<LeagueKnockOutStatisticResponse>
    +GetLeagueUpdateInfo(id: int): ActionResult<LeagueUpdateInfoResponse>
    +UpdateLeagueBasicInfo(request: LeagueUpdateInfoRequest): ActionResult<LeagueUpdateInfoResponse>
}
LeagueController x--> LeagueService: leagueService

interface LeagueService

class LeagueServiceImpl implements LeagueService{
    +LeagueServiceImpl(leagueRepository: LeagueRepository, matchRepository: MatchRepository)
    +CreateLeague(request: CreateLeagueRequest, userId: int): CreateLeagueResponse
    +GetListLeagueFilters(request: ListLeagueFilterRequest): ListLeagueResponse
    +GetLeagueInfo(leagueId: int): LeagueInfoResponse
    +GetListLeagueByUser(userId: int): List<LeagueByUserDTO>
    +GetLeagueTopEvent(leagueId: int): TopEventResponse
    +GetLeagueTopPrize(size: int): TopLeaguePrizeResponse
    +GetLeagueStatisticTypeLeague(leagueId: int): LeagueLeagueStatisticResponse
    +GetLeagueStatisticTypeKO(leagueId: int): LeagueKnockOutStatisticResponse
    +DeleteLeague(leagueId: int, userId: int): DeleteLeagueResponse
    +GetLeagueUpdateInfo(leagueId: int): LeagueUpdateInfoResponse
    +UpdateLeagueInfo(request: LeagueUpdateInfoRequest, UserId: int): LeagueUpdateInfoResponse
}
LeagueServiceImpl x--> LeagueRepository: leagueRepository

interface LeagueRepository<League> implements BaseRepository
LeagueRepository --o League

class LeagueRepositoryImpl implements LeagueRepository

class ParticipationController{
    +ParticipationController(participationService: ParticipationService)
    +ConfirmRegistFee(request: ConfirmRegistFeeRequest): ActionResult<ConfirmRegistFeeResponse>
    +GetClubByLeague(request: ParticipationByLeagueRequest): ActionResult<ParticipationByLeagueResponse>
    +RemoveJoinedClub(request: RemoveClubRequest): ActionResult<RemoveClubResponse>
    +GetUnpositionClub(id: int): ActionResult<List<ClubBasicInfoDTO>>
    +AddParticipationToPosition(clubId: int, clubCloneId: int): ActionResult<AddClubPositionResponse>
    +GetListJoinedLeague(): ActionResult<List<JoinedLeagueDTO>>
    +GetLeagueTree(id: int): ActionResult<ParticipateTreeResponse>
    +ManageLeagueSettingKO(request: SaveLeagueTreeRequest): ActionResult<LeagueSettingResponse>
}
ParticipationController x--> ParticipationService: participationService

interface ParticipationService

class ParticipationServiceImpl implements ParticipationService{
    +ParticipationServiceImpl(participationRepository: ParticipationRepository )
    +ConfirmResgistFee(request: ConfirmRegistFeeRequest, userId: int): ConfirmRegistFeeResponse
    +GetParticipationByLeague(request: ParticipationByLeagueRequest): ParticipationByLeagueResponse
    +RemoveJoinedTeam(request: RemoveClubRequest, UserId: int): RemoveClubResponse
    +ListUnpositionClub(leagueId: int, userId: int): List<ClubBasicInfoDTO>
    +AddClubPosition(clubCloneId: int, clubId: int, userId: int): AddClubPositionResponse
    +GetListJoinedLeague(userId: int): List<JoinedLeagueDTO>
    +GetLeagueParticipateTree(leagueId: int): ParticipateTreeResponse
    +SaveLeagueTree(request: SaveLeagueTreeRequest, userId: int): LeagueSettingResponse
}

ParticipationServiceImpl x--> ParticipationRepository: participationRepository
ParticipationServiceImpl x--> MethodUtils

interface ParticipationRepository<Participation> implements BaseRepository
ParticipationRepository --o Participation

class ParticipationRepositoryImpl implements ParticipationRepository

class Participation{
    +ParticipationId int
    +LeagueId int
    +ClubId int
    +Confirmed bool
    +Evidence string 
    +JoinDate DateTime 
}

class MethodUtils{
  +CheckLeagueType(type: string): bool
  +CheckUserRole(role: string): bool
  +GetLeagueTypeByName(name: string): Constants.LeagueType?
  +GetMatchEventTypeByName(name: string): Constants.MatchEventType?
  +CheckFeeType(feeType: string): bool
  +CheckEditableFeeKey(feeKey: string): bool
  +CountNumberOfRound(type: string, NumberOfParticipate: int): int
  +GetKoRoot(numberOfParticipate: int): ParticipateNodeDTO
  +GetKoListBFS(root: ParticipateNodeDTO): List<ParticipateNodeDTO>
  +GetKoList(numberOfParticipate: int): List<ParticipateNodeDTO>
  +GetListMatches(ListTeam: List<string>): string[][]
  +GenerateMatchSquad(NoPlayerInSquad: int, MaxPlayerInTeam: int): int
  +GetLeagueKoRound(deep: int): string?
  +CountLeagueDateRange(type: string, numberOfParticipation: int): int
  +SumTotalLeagueFee(leagueFees: List<LeagueFeeDTO>): decimal
  +GetPlayerNumber(squadPosition: SquadPosition): int
  +GetNodeScore(node: ParticipateNode): int
  +SetColumnWidths(worksheet: IXLWorksheet): void
}

class SquadController{
    +SquadController(squadService: SquadService)
    +GetMatchSquad(matchId: int): ActionResult<MatchSquadResponse>
    +GetSquad(squadId: int): ActionResult<MatchSquadResponse>
    +GetSquadInMatch(request: 
    SquadInMatchRequest): ActionResult<MatchSquadResponse>
    +GetUnsquadPlayers(squadId: int): ActionResult<List<PlayerSquadPositionDTO>>
    +AddPlayerToPosition(request: 
    AddPositionRequest): ActionResult<AddPositionResponse>
    +RemovePlayerFromPosition(positionId: 
    int): ActionResult<RemovePositionResponse>
    +GetPlayerJoinedMatch(matchId: int): ActionResult<List<PlayerSquadPositionDTO>
    +UpdateSquadPosition(request: 
    UpdateSquadPositionRequest): ActionResult<UpdateSquadResponse>
    +GetSquadByManager(squadId: int): ActionResult<ManagerSquadResponse>
    +GetListPlayerJoinMatch(request: 
    ListPlayerJoinMatchRequest): ActionResult<List<PlayerSquadPositionDTO>>
}
SquadController x--> SquadService: squadService

interface SquadService

class SquadServiceImpl implements SquadService{
    +SquadServiceImpl(squadRepository: SquadRepository, squadPositionRepository: 
    SquadPositionRepository, playerRepository: PlayerRepository)
    +GetMatchSquad(matchId: int): MatchSquadResponse
    +GetSquadById(squadId: int): SquadResponse
    +GetSquadInMatch(request: SquadInMatchRequest): SquadResponse
    +GetUnsquadPlayer(squadId: int): List<PlayerSquadPositionDTO>
    +GetMatchPlayers(matchId: int): List<PlayerSquadPositionDTO>
    +GetPlayerForEvent(request: PlayerForEventRequest): List<PlayerSquadPositionDTO>
    +AddSquadPosition(request: AddPositionRequest, userId: int): AddPositionResponse
    +RemoveSquadPosition(squadPositionId: int, userId: int): RemovePositionResponse
    +UpdateSquadPosition(request: UpdateSquadPositionRequest, 
    userId: int): UpdateSquadResponse
    +GetSquadByManager(squadId: int, userId: int): ManagerSquadResponse
    +GetListPlayerJoinMatch(request: ListPlayerJoinMatchRequest): List<PlayerSquadPositionDTO>
} 

SquadServiceImpl x--> SquadRepository: squadRepository

interface SquadRepository<Squad> implements BaseRepository
SquadRepository --o Squad

class SquadRepositoryImpl implements SquadRepository

@enduml